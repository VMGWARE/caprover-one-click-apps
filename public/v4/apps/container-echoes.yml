captainVersion: 4
services:
  $$cap_appname-mysql:
    image: mysql:$$cap_mysql_version
    environment:
      MYSQL_ROOT_PASSWORD: $$cap_mysql_root_password
      MYSQL_DATABASE: $$cap_mysql_database
      MYSQL_USER: $$cap_mysql_user
      MYSQL_PASSWORD: $$cap_mysql_password
    volumes:
      - $$cap_appname-mysql-data:/var/lib/mysql
    restart: always
    caproverExtra:
      containerHttpPort: "3306"

  $$cap_appname-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$$cap_elasticsearch_version
    environment:
      # TODO: Find way to auto get the API key
      - discovery.type=single-node
    volumes:
      - $$cap_appname-elasticsearch-data:/usr/share/elasticsearch/data
    restart: always
    caproverExtra:
      containerHttpPort: "9200"

  $$cap_appname:
    image: index.docker.io/vmgware/echoes-server:$$cap_containerechoes_version
    environment:
      # Application configuration
      APP_PORT: 5000
      APP_URL: http://$$cap_appname.$$cap_root_domain
      FRONTEND_URL: http://$$cap_appname.$$cap_root_domain
      AUTO_ADD_AGENTS: $$cap_containerechoes_autoadd
      APP_LOG_LEVEL: info
      # JWT
      JWT_SECRET: $$cap_containerechoes_jwt_secret
      # Email
      EMAIL_HOST: $$cap_containerechoes_email_host
      EMAIL_PORT: $$cap_containerechoes_email_port
      EMAIL_USER: $$cap_containerechoes_email_user
      EMAIL_PASS: $$cap_containerechoes_email_pass
      EMAIL_FROM_ADDRESS: $$cap_containerechoes_email_from_address
      EMAIL_FROM_NAME: $$cap_containerechoes_email_from_name
      # Elasticsearch
      ELASTICSEARCH_URL: http://$$cap_appname-elasticsearch:9200
      ELASTICSEARCH_INDEX: search-container-echoes
      # Agent
      FIRST_AGENT_SECRET: $$cap_echoes_agent_secret
    restart: always
    caproverExtra:
      containerHttpPort: "5000"

  $$cap_appname-agent:
    image: index.docker.io/vmgware/echoes-agent:$$cap_containerechoes_version
    environment:
      ECHOES_SERVER: $$cap_appname:5000
      ECHOES_AGENT_SECRET: $$cap_echoes_agent_secret

caproverOneClickApp:
  variables:
    # MySQL
    - id: $$cap_mysql_version
      label: MySQL Version Tag
      defaultValue: "8.0"
      description: Check out their Docker page for the valid tags https://hub.docker.com/r/library/mysql/tags/
      validRegex: /^([^\s^\/])+$/

    - id: $$cap_mysql_user
      label: MySQL User
      defaultValue: "containerechoes"
      description: MySQL User
      validRegex: /^([^\s^\/])+$/

    - id: $$cap_mysql_root_password
      label: MySQL Root Password
      defaultValue: $$cap_gen_random_hex(32)
      description: MySQL Root Password
      validRegex: /^([^\s^\/])+$/

    - id: $$cap_mysql_database
      label: MySQL Database
      defaultValue: "containerechoes"
      description: MySQL Database
      validRegex: /^([^\s^\/])+$/

    # Elasticsearch
    - id: $$cap_elasticsearch_version
      label: Elasticsearch Version Tag
      defaultValue: "8.11"
      description: Check out their Docker page for the valid tags https://hub.docker.com/r/docker.elastic.co/elasticsearch/elasticsearch/tags/
      validRegex: /^([^\s^\/])+$/

    # Agent
    - id: $$cap_echoes_agent_secret
      label: Agent Secret
      defaultValue: $$cap_gen_random_hex(32)
      description: Agent Secret
      validRegex: /^([^\s^\/])+$/

    # Version
    - id: $$cap_containerechoes_version
      label: Container Echoes Version
      defaultValue: "next"
      description: Check out their Docker page for the valid tags https://hub.docker.com/r/containerechoes/containerechoes/tags
      validRegex: /^([^\s^\/])+$/

    # Auto add Agents: true/false
    - id: $$cap_containerechoes_autoadd
      label: Auto add Agents
      defaultValue: "true"
      description: Auto add Agents to the server
      validRegex: ^(true|false)$

    # Make the JWT secret
    - id: $$cap_containerechoes_jwt_secret
      label: JWT Secret
      defaultValue: $$cap_gen_random_hex(32)
      description: JWT Secret
      validRegex: /^([^\s^\/])+$/

    # Email: host, port, user, pass, from address, from name
    - id: $$cap_containerechoes_email_host
      label: Email Host (optional)
      description: SMTP Host

    - id: $$cap_containerechoes_email_port
      label: Email Port (optional)
      description: SMTP Port

    - id: $$cap_containerechoes_email_user
      label: Email User (optional)
      description: SMTP User

    - id: $$cap_containerechoes_email_pass
      label: Email Password (optional)
      description: SMTP Password

    - id: $$cap_containerechoes_email_from_address
      label: Email From Address (optional)
      description: SMTP From Address

    - id: $$cap_containerechoes_email_from_name
      label: Email From Name (optional)
      description: SMTP From Name
  instructions:
    start: >-
      An open-source tool designed for efficient real-time Docker log management.
    end: >-
      Please wait for 2 minutes. Container Echoes is deployed and available as $$cap_appname, please change APP_URL when you force https
  displayName: Container Echoes
  isOfficial: false
  description: An efficient, real-time Docker log management tool.
  documentation: Taken from https://github.com/VMGWARE/ContainerEchoes
